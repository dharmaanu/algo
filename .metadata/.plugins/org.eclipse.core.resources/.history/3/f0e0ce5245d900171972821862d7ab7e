Feature:  Receive Payment Mutation with different amounts in invoice and Payment

  Background:

  @priority=p0 @testId=transaction-receivePayment-3 @entity=transaction @domain=transaction @type=receivePayment @region=US @smokes
  Scenario: Create and receive payment on sale invoice
    * call read('classpath:qbo-setup.feature') {companyCriteria:'{ "regionName":"US", "sku": "PLUS", "defaultEntityCreation": ["CUSTOMER","ITEMS","ACCOUNT"] }'}

    # create invoice
    * set session.runtimeData.invoiceAmount = "10.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    
    # receive payment against invoice
    * set session.runtimeData.paymentMethodId = "1"
    * set session.runtimeData.paymentAmount = "5.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-payment-mutation.json' }

    # verify invoice is paid partially
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read.graphql', inputFile: '../input/sales-invoice-read-after-update-amount-balance.json' }
    
  @priority=p1 @testId=transaction-transaction-receivePayment-10010 @entity=transaction @domain=transaction @type=receivePayment @region=US
  Scenario: Test payment linked to 4 invoices
    * call read('classpath:qbo-setup.feature') {companyCriteria:'{ "regionName":"US", "sku": "PLUS", "defaultEntityCreation": ["CUSTOMER","ACCOUNT","ITEMS"] }'}

    # create invoice 1
    * set session.runtimeData.invoiceAmount = "1.00"
    * set session.runtimeData.paymentAmount = "1.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdFirst = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    
    # create invoice 2
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdSecond = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    
    # create invoice 3
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdThird = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    
    # create invoice 4
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdFourth = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    
    # receive payment against all invoices and verify sourceTxn   
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-payment-multiple-invoices-mutation.json' }
    * set session.runtimeData.paymentId = session.runtimeData.receivePayment-sale-invoice-payment-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    
    # Read each invoice and verify targetTxn
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdFirst   
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
    
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdSecond   
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
    
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdThird 
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
    
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdFourth 
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
