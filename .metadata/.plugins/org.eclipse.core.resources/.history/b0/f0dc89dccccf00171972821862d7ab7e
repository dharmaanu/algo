
public class UnionIntersectionUsingBinarySearch {
	public int binarySearch (int[] arr, int l, int r, int x) {
		
		int mid = l + (r-1)/2;
		
		if (x == mid) {
			return x;
		}
		// If the number to be searched is less than mid point, search from left up to mid
		else if (x < mid) {
			
			return binarySearch(arr, l, mid, x);
		}
		// If the number to be searched is greater than mid point, search from mid to right
		else {
			return binarySearch(arr, mid, r, x);
		}	
	}
	
	public static void union(int[] arr1, int[] arr2, int m, int n) {
		
		//Make sure the array 1 has fewer elements to make sorting easier. Else swap it out
		
		if (m > n) {
			
			int[] temp = arr1;
			arr1 = arr2;
			arr2 = temp;
			
			int temp1 = m;
			m = n;
			n = temp1;
			
		}
		
	}
}
