Feature:  Receive Payment Mutation
#ignoring test due to consistent failures at least since http://fmsscm.corp.intuit.net/qbo-qa/job/SILVER-V4-Test-suite/1988/cucumber-html-reports/report-feature_com-intuit-v4-transactions-receivepayment-tests-receivepayment-mutation-feature_139.html
  Background:

  @priority=p0 @testId=transaction-transaction-receivePayment-1 @entity=transaction @domain=transaction @type=receivePayment @region=US @smokes
  Scenario: Create and receive payment on sale invoice
    * call read('classpath:qbo-setup.feature') {companyCriteria:'{ "regionName":"US", "sku": "PLUS", "defaultEntityCreation": ["CUSTOMER","ACCOUNT","ITEMS"] }'}

    # create invoice
    * set session.runtimeData.invoiceAmount = "10.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.paymentAmount = "10.00"
    # receive payment against invoice
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-payment-mutation.json' }

    # modify receive payment
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-payment-mutation-update.json' }

    # modify back receive payment
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-payment-mutation-updateback.json' }

    # verify invoice is paid
    * set sesstion.runtimeData.invoiceId = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    * set session.runtimeData.paymentId = session.runtimeData.receivePayment-sale-invoice-payment-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }

    # delete receive payment
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-payment-delete.json' }

  @priority=p0 @testId=transaction-transaction-receivePayment-5 @entity=transaction @domain=transaction @type=receivePayment @region=US
  Scenario: Test Deposit Account balance changes when Create and Delete a Payment
    * call read('classpath:qbo-setup.feature') {companyCriteria:'{ "regionName":"US", "sku": "PLUS", "defaultEntityCreation": ["CUSTOMER","ACCOUNT","ITEMS"] }'}

    # create invoice
    * set session.runtimeData.invoiceAmount = "10.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }

    # verify account
    * set session.runtimeData.balance = "0.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../query/ledgerAccount-readList.graphql',inputFile:'../input/ledgerAccount-readList.json' }
    
    # receive payment against invoice
    * set session.runtimeData.paymentAmount = "10.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-payment-mutation.json' }

    # verify account: get balance from previous result.
    * set session.runtimeData.balance = session.runtimeData.receivePayment-sale-invoice-payment-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.header.amount
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../query/ledgerAccount-readList.graphql',inputFile:'../input/ledgerAccount-readList.json' }

    # delete receive payment
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-payment-delete.json' }

    # verify account
    * set session.runtimeData.balance = "0.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../query/ledgerAccount-readList.graphql',inputFile:'../input/ledgerAccount-readList.json' }

  @priority=p1 @testId=transaction-transaction-receivePayment-10010 @entity=transaction @domain=transaction @type=receivePayment @region=US
  Scenario: Test payment linked to 4 invoices
    * call read('classpath:qbo-setup.feature') {companyCriteria:'{ "regionName":"US", "sku": "PLUS", "defaultEntityCreation": ["CUSTOMER","ACCOUNT","ITEMS"] }'}

    # create invoice 1
    * set session.runtimeData.invoiceAmount = "1.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdFirst = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    * print "Invoice 1:" + session.runtimeData.invoiceIdFirst
    
    # create invoice 2
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdSecond = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    * print "Invoice 2:" + session.runtimeData.invoiceIdSecond
    
     # create invoice 3
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdThird = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    * print "Invoice 3:" + session.runtimeData.invoiceIdThird
    
     # create invoice 4
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-invoice-mutation.json' }
    * set session.runtimeData.invoiceIdFourth = session.runtimeData.receivePayment-sale-invoice-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    * print "Invoice 4:" + session.runtimeData.invoiceIdFourth
    
    # receive payment against all invoices and verify sourceTxn
    * set session.runtimeData.paymentAmount = "1.00"
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/create.graphql', inputFile: '../input/sale-payment-multiple-invoices-mutation.json' }
    * set session.runtimeData.paymentId = session.runtimeData.receivePayment-sale-invoice-payment-create.data.createTransactions_Transaction.transactionsTransactionEdge.node.id
    
    # Read each invoice and verify targetTxn
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdFirst   
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read-with-links.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
    
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdSecond   
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read-with-links.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
    
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdThird 
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read-with-links.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
    
    * set session.runtimeData.invoiceId = session.runtimeData.invoiceIdFourth 
    * def result = call read('classpath:declarative-graphql-test.feature') { queryFile: '../../../shared/query/transactions/read-with-links.graphql', inputFile: '../input/sale-invoice-read-after-update.json' }
 